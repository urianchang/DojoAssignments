================
| Introduction |
================
Use Angular routes to load partial views by using the prebuilt
module 'ngRoute':

        angular.module("ourmodulename", ['ngRoute'])

What the ngRoute module contains is a number of providers,
including $routeProvider which allows us to load our partial views.

==========
| Routes |
==========
Single page applications don't necessarily show just one fixed view.
Using AJAX, we are able to load different partial views within
our HTML document. One way that AngularJS does this is by using
the 'ng-view' directive and the '$routeProvider' service.

*** To use ng-routes with angular, you must be running a server! ***

Note that all the links we will use with angular routing start with #!/.
This prevents the browser from redirecting to another page and loading
up all the resources (CSS, img, JS) associated with the new URL.

=============
| $location |
=============
In order to navigate from one partial to another, we have to do 2 things:
    1. Inject $location into our controller like so:

        angular.controller(UsersController, function(UsersFactory, $scope, $location){
         console.log($location)
        })

    2. Use $location

        angular.controller(UsersController, function(UsersFactory, $scope, $location){
          $scope.createUser = function(){
          $location.url('/list');
         }
        })

================
| $routeParams |
================
To create a link with an ID attached, you'd do the exact same thing you have done in other stacks.

Example:
    * partials/teams.html

        <tr ng-repeat = 'team in TC.teams track by $index'>
             <td><a href="#/{{team.name}}" ng-bind = 'team.name'></a></td>
             <td><button ng-click='TC.removeTeam($index)'>Remove</button></td>
        </tr>

    * app.js

        myApp.config(function ($routeProvider) {
             // continue of config
             .when('/:teamname',{
              templateUrl: 'partials/team.html'
             })
        });

    * controller.js

        myApp.controller('teamController', function(teamsFactory, $routeParams){
            console.log($routeParams)
        })

==============
| ngMessages |
==============
ngMessages works by supplying each input tag with a few validation options.

Example:
    * Set up: /index.html

        <script src="https://ajax.googleapis.com/aj..."></script>
        <script src="https://ajax.googleapis.com/aj..."></script>
        <script src="https://ajax.googleapis.com/aj..."></script>
        <script type = 'text/javascript'>
            var myApp = angular.module('myApp', ['ngRoute', 'ngMessages']);
            # other code here-rainbow">!
        </script>

    * Use: /partials/players.html

        <div ng-controller='playersController as PC'>
         <h3>New Player</h3>
         <form name='playerForm'>
             Name: <input type='text' name='name' ng-model='PC.newPlayer.name' minlength='4' required>
             <button ng-click='PC.createPlayer()'>Add Player</button>
         </form>
        </div>

    * Displaying: /partials/players.html
    
        <div ng-controller='playersController as PC'>
         <form name='playerForm'>
             Name: <input name='name' type='text'  ng-model='PC.newPlayer.name' minlength='4' required >
             <button ng-click='PC.createPlayer()'>Add Player</button>
         </form>
         <div ng-messages="playerForm.name.$error">
             <p ng-message="minlength">The player name is too short.</p>
             <p ng-message="required">The player name is required.</p>
         </div>
        </div>
