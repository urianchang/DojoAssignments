================
| Introduction |
================

Angular is a tool to take data from your database and control all facets of the CRUD
life cycle through the use of powerful HTML tools in the form of directives.

Advantages:
    * Modularize our code into MVC-like architecture.
        - Angular Controllers control what is rendered onto a page (the view) by
            interacting with a factory (the model) that stores data and communicates
            with the server via AJAX calls.
    * Multi-page web apps create HTML by assembling and joining it with data on server.
      Server returns finished pages up to the browser where they are rendered.
    * Angular apps add a client-side ability to hold onto data and the ability to perform
      logic using controllers.

Disadvantages:
    * Clients must have JavaScript enabled on their browsers.
    * If the client is using an old version of a browser, or a slow computer, their
      experience may suffer when visiting an Angular front-end-built website (to the
      extent of it not working at all).

Each of the views is controlled by an Angular directive called a controller.

Example:
        app.controller('PlayersController', ['$scope', function($scope) {
        //javascript that controls the Player view goes here:
        }]);
        app.controller('AssociationsController', ['$scope', function($scope) {
        //javascript that controls the Associations view goes here:
        }]);
        app.controller('TeamsController', ['$scope', function($scope) {
        //javascript that controls the Teams view goes here:
        }]);

Data are held in 'factories'. Factories are singleton objects. They are created
once per page. In general, they hold data and methods for manipulating that data.
They communicate with the server via $http requests and are injected as dependencies
into other Angular directives.

Example:
        app.factory('PlayerFactory', ['$http', function($http) {
          var players = {}; //object that holds methods and public properties for players.  Remember OOP - there are different ways of creating objects and adding methods and properties to that object.
          return players;
        }]);
        app.factory('TeamFactory', ['$http', function($http) {
          return {
            //object that holds methods and public properties for teams.  Remember OOP - there are different ways of creating objects and adding methods and properties to that object.
          };
        }]);

=========================
| Angular Relationships |
=========================

Similarly, the module methods .controller and .factory add objects to the angular.module generated object.

To gain access to properties of another object, it is possible to use the JavaScript method:
bind, call and apply. But Angular simplified this! When we create a new property, for example:

        app.controller('PlayersController', ['$scope', function($scope) {
        //javascript that controls the Player view goes here:
        }]);

This code creates a new controller.  If we want access to other Angular objects, all we do is inject
other objects from the app in!

        app.controller('PlayersController', ['$scope', 'newinjectable', function($scope, "custom name of new injectable") {
        //javascript that controls the Player view goes here:
        }]);

Now our PlayersController has access to $scope and newinjectable. To use the methods and properties of $scope,
we’ll access them using $scope.method or property. To access newinjectable, which could be a factory,
we’ll access it by whatever custom name we gave it and its properties by using a period(.).
For example, if the newinjectable custom name is UserFactory, we can do something
like UserFactory.addNewUser().

Just like our controller example, many of our factories are injected with the $http service object.
This object makes our AJAX calls to the DB similar to jQuery $.get, $.ajax, $.post methods.

===================
| Getting Started |
===================

Angular directive : marker on a DOM element
    - ex: ng-app and ng-init

'ng-app': like telling the browser, 'Hey, this element and all of its children are now under
    the purview of Angular!' Usually add it to the HTML tag ('<html ng-app>').

'ng-init': simple directive that lets us declare a variable. Helps us test if everything
    is working appropriately.

** We can elminate EJS templating **
Angular will be doing all the HTML manipulation and rendering UI for us. This offloads
the process onto each individual client, as opposed to putting all the work on the server.

Now, with Angular, each client (i.e. the browser window) is responsible for rendering its
own 100 documents. Moving logic to the client makes our apps more scalable.

==============
| Directives |
==============

Directives direct something to happen within your HTML.

Compiling Angular:
Angular templates get compiled to angular views by the angular compilers.

The 'ng-app' directive takes the form of a custom HTML attribute. Now everything from
the start of the html tag to the end of the html tag is controlled by an ng-app directive.

Double brackets are a way to execute Angular code that will be rendered into HTML.
The same effect can be achieved using a 'ng-bind' directive.

There is no advantage to one or the other in terms of speed, but the double curly
brackets might show up on a slow-loading browser before Angular gets completely
rendered, whereas ng-bind won’t.

Most directives have a scope: usually from the tag that they are initially bound to,
through the end of that tag. The $scope object can hold data related to the directives scope.

We can add data to the $scope object using the ng-init directive.
The ng-init directive allows us to initialize data for angular to use.

'ng-repeat' takes any array available to angular and acts as a loop to iterate through it.

===========
| Modules |
===========

How to use the default angular module: ng-app=''

Setting 'ng-app' directive to an empty string indicates we are going to use
all of the default functionalities and no more.

Using the angular module method (angular.module()), we are able to instantiate our own module.
The first parameter we pass to the angular.module() method is its name. This is the value you
will set the ng-app attribute equal to in order to use it! The second parameter we pass is an
array containing any additional configuration objects. For the projects we do here, we are
going to use one module per app.

Dependency injection is a top-down inheritance pattern. By passing all necessary resources to
the object of highest importance upon its creation, there is no confusion when we need to know
what the object is capable of or what abilities its children may possess.

=============================
| Controllers, $scope, this |
=============================

Angular Controllers:
If module is the head-honcho of Angular, then the controllers are the second-in command.
Angular controllers are responsible for logic pertaining to the flow of data in a particular
portion of our view page. In general, each 1 partial or section of HTML has a controller
attached to it, so we can bind values from JS to that part of HTML.

** The $scope object is the glue between the controller and the view **

Controller Syntax - (Using $scope):
Using 'ng-controller' directive gives all of the HTML encapsulated by the parent div access
to the specified controller and its associated scope.

Scope methods and data binding (again):
Angular boasts two-way data binding: changes in the $scope data will be updated on the view AND
changes on the view will be updated in the $scope.

    * 'ng-click' : specify custom behavior when an element is clicked
    * 'ng-model' : allows data on VIEW side to be available to $scope variable
        - Binds input, select, textarea (or custom form control) to a property on the scope
            using NGModelController, which is created and exposed by this directive
        - Responsible for:
            + Binding view into model, which other directives like 'input', 'textarea', or 'select' require
            + Providing validation behavior
            + Keeping the state of the control
            + Setting related css classes on the element including animations
            + Registering control with its parent form

** No scope, no data binding! **

Controller Syntax - (Using this):
'this' and '$scope' act the same in every way. Use 'this' method to avoid mixing controllers
when we want to test controllers.

================
| Data Binding |
================

Data-binding is an automatic way of updating the view whenever the model changes, as well as
updating the model whenever the view changes.

    * 'ng-show' : Shows or hides the given HTML element based on the expression provided to ngShow attribute

            <!-- when $scope.myValue is truthy (element is visible) -->
            <div ng-show="myValue"></div>

            <!-- when $scope.myValue is falsy (element is hidden) -->
            <div ng-show="myValue" class="ng-hide"></div>

    * 'ng-if' : Removes or recreates a portion of the DOM tree based on an {expression}. If
        the expression assigned to 'ng-if' evaluates to a false value then the element is removed
        from the DOM, otherwise a clone of the element is reinserted into the DOM.
        - Differs from ngShow and ngHide; ngIf completely removes/recreates, not changing CSS 'display'

=============
| Factories |
=============

In Angular, controllers are not responsible for obtaining data; they are only expected to pass data to
the views by managing the $scope object.

In Angular, there are types of objects whose job is to provide data to the controllers, these are
intuitively named providers, which come in two flavors, factories and services. Factories and services
both have the same job: provide data/information to controllers, but they do it slightly differently.
Factories return objects, Services use the keywords “new” and “this” (remember that OOP chapter?)
to return objects.

Factory example:
        myAppModule.factory('studentFactory', function(){
             var factory = {};
             factory.someKeyName = 'Some Value'
             factory.someMethodName = function(){ /* Code Here */ }
             return factory;
        })

Steps:
The Factory: To create a factory, build a function that returns an object literal.
Inject the Factory: Add the factory to the list of injections to the controller function,
    and give it a name in the parameters!

You can inject many services, and the same service can be injected into many controllers.

** Factories are what’s called a 'singleton'.
A singleton is an object that can be used in many places, but any time that singleton is called,
the same object will be referenced in all cases. This means that you can use a factory in as
many controllers as you want and they will all utilize the same object. **

The callback is a great way to pass data from the factory to the controller
(this will be very important when we connect the server-side).

This separation of data and data logic (factory) from the controller is important. Modularization
will keep our apps organized, and the singleton nature of the services will minimize the load times!

Services often are injected into one another, but don’t inject controllers into one another
($scope will drive you crazy if you do!)!

============
| Services |
============
Commonly used services:

$http : This service allows us to make AJAX calls to different API’s (in our case: our server!).
    It is extremely useful. Compare $.ajax in jQuery

$location : This service allows us to change the window URL using JavaScript.

$timeout and $interval : These services are akin to window.setTimeout and window.setInterval,
    so are useful for generating timers.

Add-ons Have Other Good Services:
* ngRoute has two very useful methods:

    $routeProvider - a provider that will make AJAX calls to load partial views.

    $routeParams - allows us to get parameters from URLs.

* ngCookie: $ngCookie - allows us to set cookies easily.

========================
| Controllers - Review |
========================
1) We create a variable that is equal to an angular module, e.g.

        var app = angular.module('myAwesomeModule',[]);

2) We then use a method of that module to create our controller, e.g.

        app.controller('myCoolController',['$scope', function($scope){}]);

Try to minimize the work the controller does: skinny controllers, fatter factories!

If you want to use the properties you set you can instantiate a controller as follows:

        <div ng-controller = 'myCoolController as mCC'>
         {{mCC.property}}
        </div>
