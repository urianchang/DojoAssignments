============
| Overview |
============

MongoDB is a NoSQL database. NoSQL stands for "Not Only SQL".
While NoSQL does support a structured query language (SQL),
there is more flexibility in the storage of the data other than
just basic tabular storage.

** In a NoSQL environment, every piece of data is unaware of the other pieces. **

!! NO JOINS !!

Everything stored in a MongoDB database is a JSON object.

***********
Go here to run mongod.exe and mongo.exe (two terminal windows):
        cd c:/"Program Files"/MongoDB/Server/<version_number>/bin/
***********

================
| Dependencies |
================

* mongod daemon
    - A daemon is simply a program that runs in the background which manages different processes.
    - Run mongod and leave it running while we use the database
* mongo terminal
    - Needs mongod running
    - Access database manually to create, update, and manage your data directly

==================
| Basic Concepts |
==================

Database Type:	                                   SQL	        Mongo
Database	                                      Schema	    Database (db)
Collection of related records	                  Tables	    Collections
Each one record in the collection of records	Row / Record	Document

MySQL Database Schema == MongoDB Database (db)
SQL: Tables == MongoDB: Collections
SQL: Row / Record == MongoDB: Document (JSON object)

'show dbs' - Show all databases
'db' - Show current database
'use DB_NAME' - Change to another database / Create new one if DNE
'use DB_NAME // db.dropDatabase()' - Delete database
'show collections' - View all collections in a MongoDB
'db.createCollection('NAME')' - Create a new collection in the current database
'db.COLLECTION_NAME.drop()' - Destroy a collection
'db.COLLECTION_NAME.insert({key: "value"})' - Add document to collection

MongoDB doesn't use JSON objects to store your data. They use what's called BSON (Binary JSON).
BSON is friendlier to store (due to it being binary; don't stress about this) and can support a
few more things (like dates, which are not part of JSON, but crucial for databases).

=============
| Documents |
=============

Basic CRUD operations:

CREATE:
        // Pattern:
        db.COLLECTION_NAME.insert({YOUR_JSON_DOCUMENT})

        // Example:
        db.ninjas.insert({name: "Trey", belt: "black", status: "awesome"})

READ:
        // Pattern:
        db.COLLECTION_NAME.find({YOUR_QUERY_DOCUMENT})
        // Pretty print
        db.COLLECTION_NAME.find().pretty()

If you want to just find all of the given collection, you can pass an empty object to the .find
method; or you can just not pass anything at all.

HINT: if you want to sort by something like creation time in MongoDB, you can sort by ObjectId
because it is made by using a time stamp as part of the string.

DESTROY:
        // Pattern:
        db.COLLECTION_NAME.remove({YOUR_QUERY_DOCUMENT}, BOOLEAN)

        // Example
        db.ninjas.remove({belt: "yellow"})
        db.ninjas.remove({belt: "yellow"}, false) // this query would have the same effect as the one above.

The second parameter is a boolean, and it is OPTIONAL. If the parameter is omitted, it defaults to false.
The boolean is called the justOne boolean, and if it is present and it is true, the remove query will
only remove the first document that matches the query.

UPDATE:
        // Pattern:
        db.COLLECTION_NAME.update({QUERY}, {FIELDS_TO_UPDATE}, {OPTIONS})
        // Note: the options document is optional

        // Example:
        db.ninjas.update({name: "Trey"}, {location: "Mountain View"}) // Overwrite
        db.ninjas.update({name: "Trey"}, {$set: {location: "Mountain View"}})

MongoDB's native update method will completely overwrite everything except the _id field
when we run the way shown above. '$set' is an update operator (covered later).

=============
| Operators |
=============

Operators are an important part of MongoDB. Queries are more method-based
and not typed syntax like regular SQL. Operators allow you to 'operate'
on the data.

Example to find number of students greater than 15:
        db.dojos.find({number_of_students: {$gt: 15}})

Common operators:
NAME:                  DESCRIPTION:
$gt (>)                Use to query selectively on numerical-valued fields
$gte (>=)              Use to query selectively on numerical-valued fields
$lt (<)                Use to query selectively on numerical-valued fields
$lte (<=)              Use to query selectively on numerical-valued fields
$in (in array)         Use to find documents who have a particular value within an array
$push                  Push to an array contained within a document
$pop                   Removes either the first or last element from an array. Use 1 for the last item in the array, -1 for the first item.
$addToSet              Functions like $push. Only adds to the specified array if the value doesn't already exist (thereby preventing duplicate entries).
$pull                  Removes a specified value from an array, unlike $pop, which removes by location. This will remove all instances of VALUE from the documents with the array specified by the array_key that match QUERY.

Examples:
    IN:
        db.COLLECTION.find({field : {$in: [value1, etc]}})
    PUSH:
        db.students.update({_id: ObjectId("5463d871a6a96d5ed6252f4d")}, {$push: {interests: 'snowboarding'}})
    POP:
        db.COLLECTION.update({QUERY}, {$pop: {array_key: (1 or -1)}})
    PULL:
        db.COLLECTION.update({QUERY}, {$pull: {array_key: VALUE}})

=============
| Mongooose |
=============
Mongoose is able to connect to a MongoDB database and it will allow us to give a
little bit more structure to our data by providing functionality in the form
of models and schemas.

Mongoose allows us to make models in the traditional MVC sense. It acts as a layer between our
application and our database, which is a very common pattern in software development. By
converting our free-form MongoDB data into models, we are able to do things like validate,
add associations, and run more intricate queries more effectively.

How back-end works:
    1. First, we have our web server which handles all of the incoming requests and decides which
    logic units to call upon (in our case our web server and logic units are in the same
    place -- server.js).

    2. Next, we will have our database server which is the "mongod" that we will have to send
    requests to (from express). How do we connect the two and how do we make it easy to interact
    with the database server from express? Mongoose.

Mongoose provides more structure to MongoDB by adding schemas that we can create that turn into models
for our collections. These models specify keys, types, and even validations for documents in a specific
collection. Mongoose also handles appropriate naming (plural for collection names and singular for
model names) for us!

Connect Mongoose to MongoDB:

    mongoose.connect('mongodb://localhost/basic_mongoose');

* If you connect to a database that doesn't exist, mongoose WILL create the DB for you!

Create your Mongoose Schemas:

    var UserSchema = new mongoose.Schema({
    name: String,
    age: Number
    })
    mongoose.model('User', UserSchema); // We are setting this Schema in our Models as 'User'
    var User = mongoose.model('User') // We are retrieving this Schema from our Models, named 'User'

* If you create a model, mongoose WILL create the appropriate collection in your database
    for you! Even with the appropriate naming (plural for collection names)!

***** Common Mongoose Commands *****

CREATE a Schema:
        // Create a Schema for Users
        var UserSchema = new mongoose.Schema({
         name: {type: String},
         age: {type: Number}
        }, {timestamps: true})
        // Store the Schema under the name 'User'
        mongoose.model('User', UserSchema);
        // Retrieve the Schema called 'User' and store it to the variable User
        var User = mongoose.model('User');

Finding all users:
        // Using the User Schema...
        // ...retrieve all records matching {}
        User.find({}, function(err, users) {
         // Retrieve an array of users
         // This code will run when the DB is done attempting to retrieve all matching records to {}
        })

Finding all users based on a requirement:
        // ...retrieve all records matching {name:'Jessica'}
        User.find({name:'Jessica'}, function(err, user) {
         // Retrieve an array of users matching the name. Even if 1 record is found, the result will be an array the size of 1, with 1 object inside. (Notice, if we are expecting to retrieve one record, we may want to use findOne and retrieve the object as oppose to an array the size of one.
         // This code will run when the DB is done attempting to retrieve all matching records to {name:'Jessica'}
        })

Finding one user:
        // ...retrieve 1 record (the first record found) matching {}
        User.findOne({}, function(err, user) {
         // Retrieve 1 object
         // This code will run when the DB is done attempting to retrieve 1 record.
        })

Create a sample user:
        // ...create a new instance of the User Schema and save it to the DB.
        var userInstance = new User()
        userInstance.name = 'Andriana'
        userInstance.age = 29
        userInstance.save(function(err){
         // This code will run when Mongo has attempted to save the record.
         // If (err) exists, the record was not saved, and (err) contains validation errors.
         // If (err) does not exist (undefined), Mongo saved the record successfully.
        })

Delete all users:
        // ...delete all records of the User Model
        User.remove({}, function(err){
         // This code will run when the DB has attempted to remove all matching records to {}
        })

Delete one user:
        // ...delete 1 record by a certain key/vaue.
        User.remove({_id: 'insert record unique id here'}, function(err){
         // This code will run when the DB has attempted to remove all matching records to {_id: 'insert record unique id here'}
        })

Update any records:
        // ...update any records that match the query
        User.update({name:'Andrinnna'}, {name:'Andriana'}, function(err){
         // This code will run when the DB has attempted to update the matching record.
        })
        // another way to update a record
        User.findOne({name: 'Andriana'}, function(err, user){
         user.name = 'Andri'
         user.save(function(err){
             // if save was successful awesome!
         })
        })

DEPENDENCIES for MONGOOSE:
    * Node.js + Express
    * MongoDB
    * node_modules:
        * Mongoose
        * EJS
        * Express
        * body-parser

VALIDATIONS:
Validation methods in Mongoose are one-dimensional: validate things using optional parameters in our
schema definition. See: http://mongoosejs.com/docs/validation.html

Example:
        // require the mongoose module
        var mongoose = require('mongoose');
        // to make a model, you can first define a schema, which is just the BLUEPRINT for a model
        var UserSchema = new mongoose.Schema({
            first_name:  { type: String, required: true, minlength: 6},
            last_name: { type: String, required: true, maxlength: 20 },
            age: { type: Number, min: 1, max: 150 },
            email: { type: String, required: true }
        }, {timestamps: true });

Displaying validation errors (Angular will resolve this):
    Server.js:
        app.post('/users', function (req, res){
            var user = new User(req.body);
            user.save(function(err){
                if(err){
                    res.render('index', {title: 'you have errors!', errors: user.errors})
                }
                else {
                    res.redirect('/users');
                }
            });
        })

    Index.ejs:
        <% if(typeof(errors) != 'undefined' ) { %>
            <% for (var x in errors) { %>
             <h3><%= errors[x].message %></h3>
            <% } %>
        <% } %>

Mongoose Validator (node module) allows you to create powerful validation arrays to go with models.

================
| Associations |
================
Using Mongoose, we are able to create associations between Mongo objects.

Example: One-to-many relationship (post model with a comment model)
Setup:
        POST MODEL:
            //: Establish a schema variable
            var Schema = mongoose.Schema;
            var postSchema = new mongoose.Schema({
             text: { type: String, required: true },
             comments: [{type: Schema.Types.ObjectId, ref: 'Comment'}]
            }, { timestamps: true });
            // The 'type' property of the object inside of the array is an attribute
            // that tells Mongoose what to look for.

* One-to-Many relationship because the comments property is an array, meaning the post
model will have many comments. Secondly, the object we are going to have many of has two
properties: type and ref. Type property tells Mongoose the unique identifier for our
association, which for us is the ObjectID of each comment. The ref property tells Mongoose
what model the unique identifier is associated with.

:: MONGOOSE IS KEEPING AN ARRAY FULL OF ASSOCIATED COMMENT ID'S ::

        COMMENT MODEL:
        var commentSchema = new mongoose.Schema({
        // since this is a reference to a different document, the _ is the naming convention!
        _post: {type: Schema.Types.ObjectId, ref: 'Post'},
        text: { type: String, required: true },
        }, {timestamps: true });

Retrieving the data:
Important methods are: .populate() and .exec(). The .populate() method tells post model
to gather the associated comments and the .exec() method actually fires the action.

    Example of getting comments for one post:
        // just an example route, your routes may look different
        app.get('/posts/:id', function (req, res){
        // the populate method is what grabs all of the comments using their IDs stored in the
        // comment property array of the post document!
        Post.findOne({_id: req.params.id})
        .populate('comments')
        .exec(function(err, post) {
          res.render('post', {post: post});
            });
        });

Adding a comment:
To add a comment to a preexisting post, we must update both parties.

    Example:
        //  just a sample route.  Post request to update a post.
        //  your routes will probably look different.
        app.post('/posts/:id', function (req, res){
           Post.findOne({_id: req.params.id}, function(err, post){
               // data from form on the front end
               var comment = new Comment(req.body);
               //  set the reference like this:
               comment._post = post._id;
               // now save both to the DB
               comment.save(function(err){
                       post.comments.push(comment);
                       post.save(function(err){
                            if(err) {
                                 console.log('Error');
                            } else {
                                 res.redirect('/');
                            }
                        });
                });
           });
        });

*** TRY TO AVOID USING MANY-TO-MANY RELATIONSHIPS WITH MONGODB ***

Embedding documents makes querying a lot easier.

Example:
    ORIGINAL:
        {
           _id: "dojo",
           name: "CodingDojo"
        }
        {
           business_id: "dojo",
           street: "10777 Main Street",
           city: "Bellevue",
           state: "WA",
           zip: "98004"
        }
        {
           business_id: "dojo",
           street: "1980 Zanker Road",
           city: "San Jose",
           state: "CA",
           zip: "95112"
        }

    EMBEDDED:
    {
       name: "CodingDojo",
       locations: [
                    {
                        street: "10777 Main Street",
                        city: "Bellevue",
                        state: "WA",
                        zip: "98004"
                    },
                    {
                        street: "1980 Zanker Road",
                        city: "San Jose",
                        state: "CA",
                        zip: "95112"
                    }
                  ]
     }
