Notes - JavaScript v2 - Fundamentals

Functions in JavaScript are known as “First-Class”:
    * Functions can be stored as standalone functions (like above), as the value of variables,
        or as attributes in a JavaScript object (where they're known as methods)
    * Functions can be passed as arguments to functions (known as a callback)
    * Functions can be returned from functions. (This is creating what’s called a closure,
        which we’ll discuss later.)

Ternary operator: single line if-else check
    Ex: (condition) ? console.log(true) : console.log(false)

Do-while Loops:
    Ex:
        do {
            // CODE HERE
        } while (parent_permission)

Loops can be used on both arrays (by index), as well as objects (by key).
    Ex:
        for (var key in ninja) {
            if (ninja.hasOwnProperty(key)) {
                console.log(key);
                console.log(ninja[key]);
            }
        }

Arrays are generally used to keep track of a list of related things of the same type.
While objects are generally used to keep attributes of a thing associated with that thing.

=====================
| Function Hoisting |
=====================
This:
    awesome();
    function awesome() {
    console.log("too good to be true");
    }

Runs like this:
    // JS rearranges your code before running it
    function awesome() {     // the function floated to the top!
    console.log("too good to be true");
    }
    awesome();               // so now awesome is defined before we invoke it!

This:
    varFunction();
    var varFunction = function() {
      console.log("How will this get hoisted?")
    }

Runs like this:
    // HOW THE JS INTERPRETER REARRANGES THE CODE
    var varFunction;           // the variable declaration gets hoisted to the top
    varFunction();             // this tries to invoke "undefined": we get "undefined is not a function"
    varFunction = function() {
    console.log("How will this get hoisted?")
    }

====================
| Function Scoping |
====================

JavaScript has function scoping. What this means is that the variables that you declare with var inside a
function are accessible only inside the function they are declared in.

Understanding scope and how to use it and when and where variables are defined to structure our code will
make our JavaScript careers that much more awesome.

=================
| Organize Code |
=================
Example:

        // Overview: This function creates game objects, by returning a game object when invoked
        function GameConstructor(consumerPrice,dealerCost,name, inStock){
          // private variables
          // dealerCost is private so a buyer can't see our ridiculous markup!
          var consumerPrice = consumerPrice;
          var dealerCost = dealerCost;
          // if you are returning an object, set it as the last private variable
          var ourGame = {}; // end of private properties
          // public properties
          //_ signifies a field that we shouldn't modify, but is public
          ourGame._name = name;
          ourGame.type = 'board game';
          ourGame.player = [];
          // public methods can affect private variables!
          ourGame.addPlayer = function(player_name){
            ourGame.player.push(player_name);
          }
          ourGame.showPrivateVariables = function(){
            console.log(dealerCost);
            console.log(consumerPrice);
          }//end of methods


          //private methods :
          function myPrivateFunction(){
            console.log('hello, I am going to create a new object when I am returned!');
          }
          //End private methods
            // run events prior to construction if necessary
          myPrivateFunction();
          // return your final object (We will learn about other strategies to construct objects soon!)
          return ourGame;
        }

Even Better:
        /* **************** Game Constructor ******************
        private vars: consumerPrice, dealerCost
        private methods: myPrivateFunction: just console.logs, no logic
        public properties:  _name: acquired from parameters
                            type: constant, 'board game'
                            player: array


        public methods:     addPlayer: adds a player by name to player array
                            showPrivateVariables: console.logs our private variables
        on run: runs myPrivateFunction
        returns: ourGame object.
        *****************  END *******************/


        function GameConstructor(consumerPrice,dealerCost,name, inStock){


          var consumerPrice = consumerPrice;
          var dealerCost = dealerCost;
          var ourGame = {};


          ourGame._name = name;
          ourGame.type = 'board game';
          ourGame.player = [];


          ourGame.addPlayer = function(player_name){
            ourGame.player.push(player_name);
          }
          ourGame.showPrivateVariables = function(){
            console.log(dealerCost);
            console.log(consumerPrice);
          }


          function myPrivateFunction(){
            console.log('hello, I am going to create a new object when I am returned!');
          }


          myPrivateFunction();
          return ourGame;
        }

=======================
| Object Constructors |
=======================

Object constructors are functions that act as blueprints for creating particular objects.

Example:
        function NinjaConstructor(name, age, prevOccupation) {
          var ninja = {};     // the object that will eventually be returned
        /*
        Addition of properties to ninja.
        */
          ninja.name = name;
          ninja.age = age;
          ninja.prevOccupation = prevOccupation;
        /*
        Addition of methods to ninja
        */
          ninja.introduce = function() {
            console.log("Hi my name is " + ninja.name + ". I used to be a " + ninja.prevOccupation + " and now I'm a Ninja!");
          }
        /*
        return ninja
        */
          return ninja;
        }

                              // Create the Andrew Ninja
        var Andrew = NinjaConstructor("Andrew", 24, "Teacher");
        Andrew.introduce();
                              // Create the Michael Ninja
        var Michael = NinjaConstructor("Michael", 34, "Founder");
                              // here we redefine the introduce method for a particular "Instance" or Object
        Michael.introduce = function() {
          console.log("I am the Sensei!")
        }
        Michael.introduce();

We did a couple of things here:
    * Capitalized NinjaConstructor. This is a JavaScript convention to indicate that the function is an Object Constructor.
    * Created an object inside of the function and returned it. This is the specific instance of the object being created.
    * Redefined Michael’s introduce method (remember that these instances are just simple JavaScript objects,
        so we can manipulate them like we've always been able to)

====================
| Function Scoping |
====================

Private variables are data that's accessible within the object but not as a property of the object.

Example of private vs public:
        function Ninja(name, age, prevOccupation) {
          // PRIVATE
          var privateVar = "This is a private variable";
          var privateMethod = function() {
            console.log("this is a private method");
          }
          // PUBLIC
          this.name = name;
          this.age = age;
          this.prevOccupation = prevOccupation;
          this.introduce = function() {
            console.log("Hi my name is " + this.name + ". I used to be a " + this.prevOccupation + " and now I'm a Ninja!");
            privateMethod(); // this works since it is a scope that can access privateMethod!
            console.log(privateVar);      // this works too!
          }
        }

Private variables can be useful to protect your objects from being altered in unintended ways.

Luckily, we can create a public method that lets your program read the information without ever
being able to change it! Accessing a variable instantiated in the User function even well after
the User function finished running is taking advantage of something called closure.

Example of closure:
        function User(name, ssn){
          var social = ssn;
          this.name = name;
          // Adds a so-called 'getter' function to allow reading private variables
          this.getSSN = function(){
            return social;
          }
        }
        var mike = new User('Mike', 274164398);
        console.log(mike.getSSN()); // 274164398

=====================
| Scoping of 'this' |
=====================

Example:

        function Ninja(name, age, prevOccupation) {
          // PRIVATE
          var privateVar = "This is a private variable";
          var privateMethod = function() {
            console.log(this); // What will print here?
          }
          // PUBLIC
          this.name = name;
          this.age = age;
          this.prevOccupation = prevOccupation
          // PUBLIC METHODS DECLARED HERE
          this.introduce = function() {
            console.log("Hi my name is " + this.name + ". I used to be a " + this.prevOccupation + " and now I'm a Ninja!");
            privateMethod();
            console.log(privateVar);
          }
        }
        var Speros = new Ninja("Speros", 24, "MBA");
        Speros.introduce();

**** Inside of the private method, 'this' refers to the global Window or Node object. ****

There are a few different strategies we can use to make sure the this we're talking about inside a private method is the object instance.
One way is to capture a snapshot of this and store it in a variable that you call something else, which any method (public or private)
is free to reference.

'Fixed' Example:

        function Ninja(name, age, prevOccupation) {
          // PRIVATE
          var self = this; // HERE WE HAVE DECLARED SELF to EQUAL THE NEW OBJECT WE CREATE WITH NEW
          var privateVar = "This is a private variable";
          var privateMethod = function() {
            console.log("this is a private method for " + self.name);     // refer to name via self
            console.log(self);
          }
          //PUBLIC
          this.name = name;
          this.age = age;
          this.prevOccupation = prevOccupation
          this.introduce = function() {
            console.log("Hi my name is " + this.name + ". I used to be a " + this.prevOccupation + " and now I'm a Ninja!");
            privateMethod();
            console.log(privateVar);
          }
        }
        var Speros = new Ninja("Speros", 24, "MBA");
        Speros.introduce();

=============
| Prototype |
=============

'__proto__' stands for prototype, which is how objects in JavaScript share properties and methods.

Example:
        obj1.newProperty = "newProperty!";
        obj1.__proto__.anotherProperty = "anotherProperty!";
        console.log(obj1.anotherProperty); // anotherProperty!
        console.log(obj1.newProperty); // newProperty!
        // What about obj2?
        console.log(obj2.newProperty); // undefined
        console.log(obj2.anotherProperty); // anotherProperty! <= THIS IS THE COOL PART!

Every object constructor creates a second memory space for all objects created by that constructor
that is accessed by proto. It is one memory space, so any changes there affect every object spit out by that constructor.

Major PROS of Prototype:
    * One memory space for all! If you are creating lots of the same object and use prototype, it can save you significant memory
    * Great for general methods for objects
    * We can access prototype methods with just using .method or .property.
    * The interpreter will go through all prototypes in the prototype chain to check if any of them have the called method or property before giving up (it'll return/use the first match it finds).

Major CONS of Prototype:
    * Methods generated in prototype cannot access the private variables inside the constructor function
    * Lots of prototypes can be hard to read

Better way to implement prototypes:
    // After we create our MyObjConstructor:
    MyObjConstructor.prototype.methodName = function(){
      //do stuff here!
    }

Example of good OOP Practice:
        function Ninja(name){
          this.name = name;   // creating instance variables
          this.distance_traveled = 0;
        }
        // creating an instance method
        Ninja.prototype.walk = function() {
            console.log(this.name + ' is walking');
            this.distance_traveled += 1;
            return this;      // have this method return its own object
          };
        // creating an instance method
        Ninja.prototype.run = function() {
            console.log(this.name + ' is running');
            this.distance_traveled += 5;
            this.displayDistanceTraveled();
            return this;      // have this method return its own object
          };
        //another instance method
        Ninja.prototype.displayDistanceTraveled = function() {
            console.log('distance traveled: ', this.distance_traveled);
        }

        // creating instances/objects
        var ninja1 = new Ninja('Jay');
        var ninja2 = new Ninja('Michael');
        var ninja3 = new Ninja('Andrew');

        ninja1.walk().run().walk().run().run();  // because walk/run returns itself, we can chain these methods

        // you can also log ninja1 and study it
        console.log(ninja1);

=====================
| Bind, Call, Apply |
=====================

Bind:

Example:
        // our test object
        var customObject = {
          name:'California, Eureka',
          onClick:function(myParam){
            console.log("I've been clicked");
            console.log(myParam, "I've been passed by bind");
            console.log(this.name);
          }
        }
        // our behavior on click.
        $('button').click(customObject.onClick.bind(customObject,"Bind this argument!"));

Bind is a fantastic tool to control which this we are using and pass information from object to object,
or use other objects methods and will help DRY out your code.

WARNING: BIND CREATES A NEW METHOD OR OVERWRITES A METHOD IN THE OBJECT

Call and Apply:
First: think of Commas when you hear Call, and Arrays when you hear Apply.
Call and Apply allow us to inherit methods from other constructors.

Example:
        function Ninja(name, age){
          this.name = name;
          this.age = age;
          // there could be lots of other stuff here!
        }
        function BlackBelt(name,age){
          //Commas!
          Ninja.call(this,name,age);
          this.belt = 'black';
        }
        function YellowBelt(name,age){
          //ARRAY
          Ninja.apply(this,[name,age]);
          this.belt = 'yellow';
        }
        var yB = new YellowBelt('mike', 40);
        var bB = new BlackBelt('charlie', 29);
        console.log(bB.name);
        console.log(yB.name);

Another use of call and apply: It allows us to use this, without constructing an object with new first.

Example:
        function levelUp() {
          console.log(this.name + " has learned a new kata, in " + this.gender + " favorite language: " + this.language);
        }

        var person = {
          name: 'Lisa',
          gender: 'her',
          language: 'JavaScript, duh!'
        };

        levelUp.call(person);
