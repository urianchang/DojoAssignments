=============
| Callbacks |
=============

While a callback is just a fancy name for a function passed as an argument to another function,
it’s also the most common way of writing asynchronous code in JavaScript. By asynchronous code,
we just mean the ability to divide your code into portions that run now and later.

Example:
        function doSomething(possibleCallback) {
          if (typeof(possibleCallback) === 'function'){
            console.log('possibleCallback is a callback!');
            possibleCallback(); //we can invoke the callback!
          }
          else {
            console.log('possibleCallback: ', possibleCallback, ' is not a callback function.');
          }
        }
        doSomething(function myCallback(){ console.log('yes, I am a callback!') });
        doSomething('string');

Callbacks, especially those linked to Ajax requests, can help us create a more seamless user experience
on a web page because we can send and receive data and update the DOM without needing to refresh the page.

Another example:
        function makePasta(pasta, makeSauce) {
          console.log("Boiling water");
          console.log("Putting " + pasta + " pasta in the water");
          // create a variable for sauce!
          var sauce = makeSauce();          // invoke makeSauce, our callback
          console.log("Mixing sauce");
          console.log("Pasta is done!");
          return pasta + " Pasta with " + sauce + " sauce! Voila!";
        }
        function makePesto() {
          console.log("Making Pesto");
          return "pesto";
        }
        function makeAlfredo() {
          console.log("Making Alfredo");
          return "alfredo";
        }

        // we pass the whole makePesto recipe to makePasta!
        console.log(makePasta("Penne", makePesto));

        // notice lack of parentheses after makeAlfredo.
        // Remember: we want to pass the function, not execute it and pass a return value.
        console.log(makePasta("Farfalle", makeAlfredo));

When we pass the function as an argument into the makePasta function call, we don’t put parenthesis after “makePesto,”
because we actually want to pass the function definition, or the list of instructions, rather than execute the function
(which would just pass whatever the function returns).

==============
| Delegation |
==============

Callbacks are used to delegate functionality.

If a function takes a callback, that callback can do a myriad of things.
This allows us to use our callback to be delegated to a specific task.

Example:
        // This is a function that just prints the result of another list of instructions
        function printResult(doSomething) {
         var result = doSomething();         // store the return value of the callback parameter
         console.log(result);                // print the result!
        }
        printResult(function returnFive(){ return 5 })  // this should print "5"

Another example:
        function each(arr, callback) {
          // loop through the array
          for(var i = 0; i < arr.length; i++) {
            callback(arr[i]); // invoking the callback many times... delegation!
          }
        }
        // call the each function
        each([1,2,3], function(num) { alert(num + " I am from the callback!"); }) //so many alerts!

==================
| Event Listener |
==================

Callbacks can be used to handle events.

Example:
        // Link our variable "button" to a DOM element
        var button = document.getElementById("someButton")
        // add a DOM eventListener to that variable.
        button.addEventListener("click", whatToDoOnClick);
        // here we define the whatToDoOnClick function
        function whatToDoOnClick() {
          alert("You Did it!")
        }

======================
| Immediate Function |
======================

The immediate function pattern is a syntax that enables you to execute
a function as soon as it is defined.

Ex 1:
        (function() {
           console.log( "I'm an immediate function!" );
        }());

Ex 2:
        (function() {
           console.log( "I'm an immediate function!" );
        })();

() is used to invoke a function. ( ) helps define the order of operations.
(myfunction)<-- do this first (myfunction)() <-- create the function before doing anything else and then invoke the function!
Alternative Syntax: (myfunction()) <-- create and run the function before doing anything else.

Passing arguments to immediate functions:
        (function (param1, param2){
           console.log( "I'm an immediate function!" );
        }) ( arg1, arg2 ) ;

A common pattern when writing code that should be able to run on non-browser platforms,
or when speed is important is passing the global object as an argument. This creates a
local copy of the global object inside the function, which results in faster lookup times.

Example:
        (function (global) {
           console.log( window );               // logs the window object
           console.log( global );               // logs the window object, but faster!
        }) ( window ) ;

Some Benefits:
    * It reduces the number of global variables and mitigates variable name pollution.
    * Features are self-contained units, resulting in easier testing.

To eliminate variables/methods being exposed outside and to contain its scoping, you could
wrap them inside an immediate function. Once you wrap these inside an immediate function,
these variables/methods are no longer global (due to the function scoping of Javascript).

============
| Closures |
============

A closure is a function that is returned from another function.

Example:

        // Here we have a function called "Outer"
        function Outer() {
          // There is a count variable that is scoped to the function
        var count = 0;
          // There is an inner function that increments count and then console.logs it
        function inner() {
            // increment count
        count++
            // console.log count
        console.log(count);
        }
          // return the inner function! We can return a function!
        return inner
        }
        // counter is now the function returned from invoking Outer
        var counter = Outer();
                  // if we invoke the counter function
        counter()     // this will console.log "1"
        counter()     // this will console.log "2"
        counter()     // this will console.log "3"
        counter()     // this will console.log "4"
                  // So that means that the count variable still exists!
                  // and it is being changed even though we aren't inside of the Outer function!

        // What if we try to access count out here?
        console.log(count) // doesn't work!

============
| Currying |
============

Currying is the idea that you only run part of a function, rather than the whole thing.
It is functional programming rather than object oriented.

Example: Uncurried

        function ninjaBelt(ninja, beltColor){
          console.log("Ninja "+ ninja + " has earned a " + beltColor +" belt.");
        }
        ninjaBelt('Eileen', 'black');

Example: Curried

        function ninjaBelt(ninja){
          return function belt(beltColor){ //note the closure here!
            console.log("Ninja "+ ninja + " has earned a " + beltColor +" belt.");
          }
        }
        ninjaBelt('Eileen')('black'); //note the double invocation here.
